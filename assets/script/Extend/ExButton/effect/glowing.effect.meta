{
  "ver": "1.0.23",
  "uuid": "e8b9a2b5-023d-40ac-9f7c-2beb9dd4b425",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;v_color = a_color;\n}\n",
        "frag": "\nprecision highp float;\nuniform sampler2D texture;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform vec4 glowingcolor;\nuniform vec4 iResolution;\nconst float radius = 1.0;\nvoid main () {\n  vec2 uv = v_uv0.xy;\n  vec2 unit = 1.0 / iResolution.xy;\n  vec4 texel = texture2D(texture, uv);\n  texel*=v_color;\n  vec4 finalColor = vec4(0.0);\n  float density = 0.0;\n  if(texel.a >= 1.0)\n  {\n      finalColor = texel;\n  }\n  else\n  {\n      for(int i = 0; i < (int(radius)); ++i)\n      {\n          density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y + unit.y * float(i))).a;\n          density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y + unit.y * float(i))).a;\n          density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y - unit.y * float(i))).a;\n          density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y - unit.y * float(i))).a;\n      }\n      density = density / radius;\n      finalColor = vec4(glowingcolor.rgb * density, density);\n      finalColor += vec4(texel.rgb * texel.a, texel.a);\n  }\n  gl_FragColor = finalColor;\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;v_color = a_color;\n}\n",
        "frag": "\nprecision highp float;\nuniform sampler2D texture;\nin vec4 v_color;\nin vec2 v_uv0;\nuniform Glowing{\n  vec4 glowingcolor;\n  vec4 iResolution;\n}\nconst float radius = 1.0;\nvoid main () {\n  vec2 uv = v_uv0.xy;\n  vec2 unit = 1.0 / iResolution.xy;\n  vec4 texel = texture2D(texture, uv);\n  texel*=v_color;\n  vec4 finalColor = vec4(0.0);\n  float density = 0.0;\n  if(texel.a >= 1.0)\n  {\n      finalColor = texel;\n  }\n  else\n  {\n      for(int i = 0; i < (int(radius)); ++i)\n      {\n          density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y + unit.y * float(i))).a;\n          density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y + unit.y * float(i))).a;\n          density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y - unit.y * float(i))).a;\n          density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y - unit.y * float(i))).a;\n      }\n      density = density / radius;\n      finalColor = vec4(glowingcolor.rgb * density, density);\n      finalColor += vec4(texel.rgb * texel.a, texel.a);\n  }\n  gl_FragColor = finalColor;\n}\n"
      }
    }
  ],
  "subMetas": {}
}