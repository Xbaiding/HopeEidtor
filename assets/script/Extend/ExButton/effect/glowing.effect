CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        glowingcolor: { value: [1,1,1,1], inspector : { type : color } }
        iResolution: { value: [1280,720,0,0] }
}%


CCProgram vs %{
  precision highp float;
  #include <cc-global>
  #include <cc-local>
  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;
  in vec2 a_uv0;
  out vec2 v_uv0;
  void main () {
    gl_Position = cc_matViewProj * vec4(a_position, 1);
    v_uv0 = a_uv0;v_color = a_color;
  }
}%

CCProgram fs %{
  precision highp float;
  uniform sampler2D texture;
  in vec4 v_color;
  in vec2 v_uv0;
  uniform Glowing{
    vec4 glowingcolor;
    vec4 iResolution;
  }
  const float radius = 1.0;
  void main () {
    vec2 uv = v_uv0.xy;
    vec2 unit = 1.0 / iResolution.xy;
    vec4 texel = texture2D(texture, uv);
    texel*=v_color;
    vec4 finalColor = vec4(0.0);
    float density = 0.0;
    if(texel.a >= 1.0)
    {
        finalColor = texel;
    }
    else
    {
        for(int i = 0; i < (int(radius)); ++i)
        {
            density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y + unit.y * float(i))).a;
            density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y + unit.y * float(i))).a;
            density += texture2D(texture, vec2(uv.x - unit.x * float(i), uv.y - unit.y * float(i))).a;
            density += texture2D(texture, vec2(uv.x + unit.x * float(i), uv.y - unit.y * float(i))).a;
        }
        density = density / radius;
        finalColor = vec4(glowingcolor.rgb * density, density);
        finalColor += vec4(texel.rgb * texel.a, texel.a);
    }
    gl_FragColor = finalColor;
  }
}%
